#summary Definitions of the components

= Introduction =

This page will focus on the internal architecture of WebcamStudio so you'll get a better understanding of how it works


= Details =

Overall, WS4GL is composed of Videou Sources, a video mixer, and a video device output.  The use of the gstreamer framework is used mainly for webcam support and video playback.

It all start with the Main.class object, this being a JFrame containing most of the controls, and the instances of all the different objects needed to make it work.  WS4GL needs to keep a list of loaded Video Source all the time which aslo defines the order of which source will be draw first in the video Mixer.

Let's start with a Video Source.  The base class VideoSource contains all the functionalities required to manupulate any source of images or stream that can be displayed.  This is the core for all other Sources which must inherit this base class.  All that is required to implement is the children classes are the method "startSource", "stopSource", "pause", and some other less essential.

For example, the VideoSourceV4L is using the gstreamer framework to get an updated image of  the selected webcam from the gstreamer pipeline.  Each VideoSource has an internal image buffer to keep the last image capture.  This image is then exposed thru "getImage()" so the mixer, and other components can use the capture image as they need. 

A Video Source also implement width, height, postion on the x and y axis.  In some cases the captureWidth and captureHeight are used.  All calculation are done so the image captured at 640px will be resized at 320px for example.

All sources also have some specific methods releated to them and that do not appy to other sources.  Like a video source of VideoSourceText has a setText() and getText() method.

The Main.class has an internal vector list to hold the loaded VideoSources.  This list is then shared with the Mixer that will mix all active VideoSource in the order provided by the list.  The Mixer also keep a reference on the VideoOutput device to update the output image that will be sent to the virtual device (V4L2).

Here is a list of all Video Sources and how they work:
  * VideoSourceDesktop
  * VideoSourceText
  * VideoSourceIRC
  * VideoSourceV4L
  * VideoSourceV4L2
  * VideoSourceMovie  
  * VideoSourcePipeline
  * VideoSourceAnimation
  * VideoSourceImage
  * VideoSourceWidtget
  * VideoSourceConsole
  * VideoSourceDV
  * VideoSourceWebCameraV2
  * VideoSourcePlaylist
